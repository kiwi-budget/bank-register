buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
	    mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'io.kiwi'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

/*
stub for defining extra source sets and config
sourceSets {
    smokeTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("src/smokeTest/java")
        }
        resources.srcDir file("src/smokeTest/resources")
    }
}

configurations {
    smokeTestCompile.extendsFrom testCompile
    smokeTestRuntime.extendsFrom testRuntime
}

test {
    //we want display the following test events
    testLogging {
        showStandardStreams = true
        events "failed", "standardOut", "standardError"
    }
}

task smokeTest(type: Test) {
    testClassesDir = sourceSets.smokeTest.output.classesDir
    classpath = sourceSets.smokeTest.runtimeClasspath
    outputs.upToDateWhen { false }
    
    options {
        systemProperties(System.getProperties())
    }
    
    testLogging {
        showStandardStreams = true
        events "failed", "standardOut", "standardError"
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
*/

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	//compile('org.liquibase:liquibase-core')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
	runtime('org.postgresql:postgresql')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
